(function (win) {
	var w = win.top,
	    callback,
	    clientId = "12333";

	//Step 0. Check whether window.DAS is already present. If so, don't run the code below.
	if (w.DAS) {
		return;
	}

	//Step 1. Insert this into each page.
	w.DAS = {
		cookieName: "kfp_login",
		url: "https://static.mvideo.ru/media/js/das.js",
		waitForUserId: true,
		_userId: null,
		_userName: null,
		_loaded: false,

		/**
   * Loads UA script into the page and executes it.
   * @returns {undefined}
   */
		load: function () {
			var _self = this,
			    script,
			    head;

			//woah, we already have the script loaded. Maybe it has been loaded using <script> tag.
			if (w.kfp && typeof w.kfp === 'object') {
				_self._loaded = true;
				this._onLoginAttempt();
				return;
			}

			script = w.document.createElement('script');
			head = w.document.getElementsByTagName('head')[0];
			script.src = this.url;
			script.type = 'text/javascript';

			script.onload = script.onreadystatechange = function () {
				if (!_self._loaded && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {
					_self._loaded = true;
					_self._onLoginAttempt();
				}
			};
			head.insertBefore(script, head.firstChild);
		},

		setUserId: function (userId) {
			this._userId = userId;
			return this._onLoginAttempt();
		},

		setUserName: function (userName) {
			return this._loaded ? this._setCookie(userName) : this._userName = userName;
		},

		checkLogin: function (cb) {
			if (callback) {
				return;
			}
			callback = cb;
			if (this._loaded) {
				this._registerCheckLoginCallback();
			}
		},

		_login: function (userId) {
			var userName = this._getCookie(this.cookieName);
			//Check for login cookie presence
			if (userName) {
				// eslint-disable-line
				this._deleteCookie(this.cookieName);
				/**
     * clientId {String} Bank ID, fixed string value.
     * obsSessionId {String} Bank Session ID. Just a unique value, generated by the script itself.
     * userId {String} User ID. Required argument.
     * userName {String} Name of the user who tried to log in. Required argument.
     * loginResult {String} Defines whether login attempt has been sucessful or not. If sucessful,
     * pass string "success", else pass string "fail". Any other values are prohibited.
     */
				w.kfp.login(clientId, w.kfp.generate_uuid(), userId || userName, userName, 'success');
				//Free some memory by assigning a small boolean value to window.DAS
				w.DAS = true;
			}
		},

		_onLoginAttempt: function () {
			//Proceed only if the script has been loaded
			//Proceed only if 1)We're NOT waiting for userID, OR 2)We're waiting for userID AND it's already here
			if (this._loaded) {
				if (this._userName) {
					this._setCookie(this._userName);
				}
				if (!this.waitForUserId || this.waitForUserId && this._userId !== null) {
					this._login(this._userId);
				}
			}
		},

		_setCookie: function (value) {
			w.kfp.cookies.set(this.cookieName, value);
		},
		_getCookie: function () {
			return w.kfp.cookies.get(this.cookieName);
		},
		_deleteCookie: function () {
			w.kfp.cookies.del(this.cookieName);
		},
		_registerCheckLoginCallback: function () {
			if (!(this._loaded && callback && w.kfp.checkLogin)) {
				return;
			}
			w.kfp.checkLogin(function () {
				var response = callback(),
				    userName,
				    userId;
				if (!response) {
					return false;
				}
				if (typeof response === 'object') {
					userName = response['userName'];
					userId = response['userId'];
				} else {
					userName = userId = response;
				}
				return {
					'clientId': clientId,
					'userName': userName,
					'userId': userId,
					'obsSessionId': w.kfp.generate_uuid(),
					'loginResult': 'success'
				};
			});
		}
	};

	//Step 3. This part should be included into the login script (upon each login attempt, before page reload).
	//Make sure you provide the user name (usually from the Login field of the authorization form).
	//DAS.setUserName("someUserName");

	//Step 4. If you acquire User ID in the protected zone,forward it to the script using the following line
	//anywhere after login. Make sure that DAS.waitForUserId is set to true!
	//DAS.setUserId("someUserId");

	//For Mvideo, DAS should be loaded only in one the following cases:
	//1. User has been logged in
	//2. User in on login page
	//This is done in order to prevent track flood on our backend (unknown load estimation).
	{
		if (w['dataLayer'] && w['dataLayer'][0] && w['dataLayer'][0]['userId'] || ~w.location.href.indexOf('/login')) {
			w.DAS.load();
		}
	}
})(window);
